DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;
DROP TABLE IF EXISTS friendships CASCADE;
DROP TABLE IF EXISTS likes CASCADE;

CREATE TABLE if not exists films (
  id BIGINT generated by default as identity not null PRIMARY KEY,
  name varchar(200) NOT NULL,
  description varchar(200) NOT NULL,
  release_date date NOT NULL,
  duration integer NOT NULL,
  mpa_id BIGINT,
  likes_count BIGINT
);

CREATE table if not exists mpa (
  id BIGINT generated by default as identity not null PRIMARY KEY,
  name varchar(200) NOT NULL
);

CREATE TABLE if not exists genres (
  id BIGINT generated by default as identity not null PRIMARY KEY,
  name varchar(200) NOT NULL
);

CREATE TABLE if not exists film_genres (
  id BIGINT GENERATED by default as identity not null PRIMARY KEY,
  film_id BIGINT,
  genre_id BIGINT,
  UNIQUE (film_id, genre_id)
);

CREATE TABLE if not exists users (
  id BIGINT generated by default as identity not null PRIMARY KEY,
  name varchar(200) NOT NULL,
  login varchar(200) NOT NULL,
  email varchar(200) NOT NULL,
  birthday date NOT NULL
);

CREATE TABLE if not exists friendships (
  id BIGINT GENERATED by default as identity not null PRIMARY KEY,
  user_id BIGINT,
  friend_id BIGINT,
  status varchar(200) NOT NULL,
  UNIQUE (user_id,friend_id)
);

CREATE TABLE if not exists likes (
  id BIGINT GENERATED by default as identity not null PRIMARY KEY,
  film_id BIGINT,
  user_id BIGINT,
  UNIQUE (film_id,user_id)
);

ALTER TABLE films ADD FOREIGN KEY (mpa_id) REFERENCES mpa (id);

ALTER TABLE film_genres ADD FOREIGN KEY (genre_id) REFERENCES genres (id);

ALTER TABLE film_genres ADD FOREIGN KEY (film_id) REFERENCES films (id);

ALTER TABLE friendships ADD FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE friendships ADD FOREIGN KEY (friend_id) REFERENCES users (id);

ALTER TABLE likes ADD FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE likes ADD FOREIGN KEY (film_id) REFERENCES films (id);